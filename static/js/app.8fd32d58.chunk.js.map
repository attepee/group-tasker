{"version":3,"sources":["Styles.js","components/EmptyMsg.js","screens/HomeScreen.js","screens/GroupTasker.js","App.js"],"names":["width","Dimensions","get","height","Styles","StyleSheet","create","Root","flex","alignItems","justifyContent","backgroundColor","Container","Input","borderStyle","borderWidth","borderColor","padding","InputHeader","fontSize","fontWeight","color","TextInput","borderRadius","margin","NumberInputContainer","flexDirection","NumberInputButton","NumberInputButtonLeft","borderBottomLeftRadius","borderTopLeftRadius","NumberInputButtonRight","borderBottomRightRadius","borderTopRightRadius","NumberInput","ItemInputContainer","ItemInput","ItemInputButton","ButtonContainer","Button","paddingVertical","paddingHorizontal","ButtonHor","ButtonVert","marginBottom","Confirm","Cancel","Continue","ButtonText","fontFamily","ModalRoot","ModalContainer","FlatList","maxHeight","ItemContainer","ItemTitleContainer","ItemTitle","textAlign","ItemButton","Header","EmptyMsg","msg","View","style","Text","HomeScreen","navigation","useState","groups","setGroups","groupTitle","setGroupTitle","modalVisible","setModalVisible","isFocused","useIsFocused","useEffect","getData","storeData","a","async","AsyncStorage","getItem","value","JSON","parse","console","log","setItem","stringify","onsole","Pressable","onPress","Entypo","name","size","length","data","keyExtractor","item","index","toString","renderItem","navigate","currentItemId","id","currentItemTitle","title","currentItemParticipants","participants","currentItemTasks","tasks","array","filter","removeGroup","Modal","animationType","transparent","visible","onRequestClose","placeholder","onChangeText","text","uuidv4","GroupTasker","route","setCurrentItemId","setCurrentItemTitle","participantsModalVisible","setParticipantsModalVisible","tasksModalVisible","setTasksModalVisible","drawModalVisible","setDrawModalVisible","groupSize","setGroupSize","decrementButtonState","setDecrementButtonState","incrementButtonState","setIncrementButtonState","setParticipants","participantName","setParticipantName","setTasks","taskTitle","setTaskTitle","params","setStateGroupSize","Math","floor","setParticipantsToGroup","updatedGroup","splice","findIndex","setTasksToGroup","removeParticipant","removeTask","disabled","keyboardType","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","component"],"mappings":"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","file":"static/js/app.8fd32d58.chunk.js","sourcesContent":["import { Dimensions, StyleSheet } from 'react-native';\r\n\r\nconst width = Dimensions.get('window').width;\r\nconst height = Dimensions.get('window').height;\r\n\r\nexport const Styles = StyleSheet.create({\r\n    // Root\r\n    Root: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#fff'\r\n    },\r\n    // Container\r\n    Container: {\r\n        width: ((width < 768) ? '90%' : '30%'),\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    // Inputs\r\n    Input: {\r\n        backgroundColor: '#fff',\r\n        borderStyle: 'solid',\r\n        borderWidth: 2,\r\n        borderColor: '#333',\r\n        padding: 10\r\n    },\r\n    InputHeader: {\r\n        width: '100%',\r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        color: '#333'\r\n    },\r\n    TextInput: {\r\n        width: '100%',\r\n        borderRadius: 5,\r\n        margin: 10\r\n    },\r\n    NumberInputContainer: {\r\n        width: '100%',\r\n        flexDirection: \"row\",\r\n        justifyContent: 'center',\r\n        margin: 10\r\n    },\r\n    NumberInputButton: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '20%',\r\n        backgroundColor: '#333',\r\n        fontWeight: 'bold',\r\n        color: '#fff'\r\n    },\r\n    NumberInputButtonLeft: {\r\n        borderBottomLeftRadius: 5,\r\n        borderTopLeftRadius: 5\r\n    },\r\n    NumberInputButtonRight: {\r\n        borderBottomRightRadius: 5,\r\n        borderTopRightRadius: 5\r\n    },\r\n    NumberInput: {\r\n        width: '60%'\r\n    },\r\n    ItemInputContainer: {\r\n        width: '100%',\r\n        flexDirection: \"row\",\r\n        justifyContent: 'center',\r\n        margin: 10\r\n    },\r\n    ItemInput: {\r\n        width: '80%',\r\n        borderBottomLeftRadius: 5,\r\n        borderTopLeftRadius: 5\r\n    },\r\n    ItemInputButton: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '20%',\r\n        backgroundColor: '#333',\r\n        fontWeight: 'bold',\r\n        color: '#fff',\r\n        borderBottomRightRadius: 5,\r\n        borderTopRightRadius: 5\r\n    },\r\n    //Buttons\r\n    ButtonContainer: {\r\n        width: '100%',\r\n        flexDirection: \"row\",\r\n        justifyContent: 'space-between',\r\n        margin: 10\r\n    },\r\n    Button: {\r\n        paddingVertical: 12,\r\n        paddingHorizontal: 32,\r\n        borderRadius: 4,\r\n        alignItems: 'center',\r\n    },\r\n    ButtonHor: {\r\n        width: '48%',\r\n    },\r\n    ButtonVert: {\r\n        width: '100%',\r\n        marginBottom: 10\r\n    },\r\n    Confirm: {\r\n        backgroundColor: '#4EDA25'\r\n    },\r\n    Cancel: {\r\n        backgroundColor: '#DA5625'\r\n    },\r\n    Continue: {\r\n        backgroundColor: '#25A9DA'\r\n    },\r\n    ButtonText: {\r\n        fontSize: 16,\r\n        fontFamily: 'sans-serif',\r\n        fontWeight: 'bold',\r\n        color: '#fff'\r\n    },\r\n    // Modal\r\n    ModalRoot: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#fff'\r\n    },\r\n    ModalContainer: {\r\n        width: ((width < 768) ? '90%' : '30%'),\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    // FlatList\r\n    FlatList: {\r\n        width: '100%',\r\n        maxHeight: height * 0.4\r\n    },\r\n    ItemContainer: {\r\n        width: '100%',\r\n        flexDirection: \"row\",\r\n        justifyContent: 'center',\r\n        marginBottom: 10,\r\n    },\r\n    ItemTitleContainer: {\r\n        width: '80%',\r\n        borderStyle: 'solid',\r\n        borderWidth: 2,\r\n        borderColor: '#333',\r\n        borderBottomLeftRadius: 5,\r\n        borderTopLeftRadius: 5,\r\n        padding: 10\r\n    },\r\n    ItemTitle: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        color: '#333',\r\n        textAlign: 'center'\r\n    },\r\n    ItemButton: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '20%',\r\n        backgroundColor: '#333',\r\n        fontWeight: 'bold',\r\n        color: '#fff',\r\n        borderBottomRightRadius: 5,\r\n        borderTopRightRadius: 5\r\n    },\r\n    // Misc\r\n    Header: {\r\n        width: '100%',\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        color: '#333',\r\n        marginBottom: 10\r\n    }\r\n});","import * as React from 'react';\r\nimport { Text, View } from 'react-native';\r\n\r\nexport function EmptyMsg(msg) {\r\n    return (\r\n        <View style={{justifyContent: 'center', alignItems: 'center', flex: 1}}>\r\n            <Text style={{color: '#333', fontSize: 24, textAlign: 'center', padding: 20}}>{msg}</Text>\r\n        </View>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { FlatList, Pressable, Modal, Text, TextInput, View } from 'react-native';\r\nimport { Entypo } from '@expo/vector-icons';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useIsFocused } from '@react-navigation/native';\r\n\r\nimport { Styles } from '../Styles';\r\nimport { EmptyMsg } from '../components/EmptyMsg';\r\n\r\nexport function HomeScreen({ navigation }) {\r\n    const [groups, setGroups] = useState([]);\r\n    const [groupTitle, setGroupTitle] = useState();\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const isFocused = useIsFocused();\r\n\r\n    useEffect(() => { if(isFocused) {\r\n        getData();\r\n    }},[useIsFocused]);\r\n\r\n    useEffect(() => {\r\n        storeData();\r\n    },[groups]);\r\n\r\n    // Add new group to the array\r\n    const setGroup = () => {\r\n        setGroups([...groups, {id: uuidv4(), title: groupTitle, participants: [], tasks: []}]);\r\n        storeData();\r\n        setModalVisible(!modalVisible);\r\n    };\r\n\r\n    // Remove the selected group from the array\r\n    const removeGroup = (id) => {\r\n        let array = groups.filter(item => item.id !== id);\r\n        setGroups(array);\r\n    };\r\n\r\n    // Get and parse JSON data from the local storage\r\n    const getData = async () => {\r\n        try {\r\n            const value = await AsyncStorage.getItem('@groups')\r\n            if(value !== null) setGroups(JSON.parse(value));\r\n        }\r\n        catch(e) {\r\n            console.log(\"Something went wrong while loading groups.\");\r\n        }\r\n    };\r\n\r\n    // Store data in local storage as JSON\r\n    const storeData = async () => {\r\n        try {\r\n            await AsyncStorage.setItem('@groups', JSON.stringify(groups));\r\n        }\r\n        catch (e) {\r\n            onsole.log(\"Something went wrong while saving the groups.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={Styles.Root}>\r\n            <View style={Styles.Container}>\r\n                <Pressable\r\n                    style={[Styles.Button, Styles.ButtonVert, Styles.Continue]}\r\n                    onPress={() => setModalVisible(!modalVisible)}\r\n                >\r\n                    <Text style={Styles.ButtonText}>\r\n                        <Entypo name=\"users\" size={16} color=\"white\" /> New\r\n                    </Text>\r\n                </Pressable>\r\n                {(groups.length < 1) ? EmptyMsg(\"No groups yet...\") :\r\n                    <FlatList\r\n                        style={Styles.FlatList}\r\n                        data={groups}\r\n                        keyExtractor={(item, index) => index.toString()}\r\n                        renderItem={({ item }) =>\r\n                            <View style={Styles.ItemContainer}>\r\n                                <Pressable\r\n                                    style={Styles.ItemTitleContainer}\r\n                                    onPress={() => navigation.navigate(\"Group tasker\", {\r\n                                        groups: groups,\r\n                                        currentItemId: item.id,\r\n                                        currentItemTitle: item.title,\r\n                                        currentItemParticipants: item.participants,\r\n                                        currentItemTasks: item.tasks\r\n                                    })}\r\n                                >\r\n                                    <Text style={Styles.ItemTitle}>{item.title}</Text>\r\n                                </Pressable>\r\n                                <Pressable\r\n                                    style={Styles.ItemButton}\r\n                                    onPress={() => removeGroup(item.id)}\r\n                                >\r\n                                    <Entypo name=\"cross\" size={20} color=\"white\" />\r\n                                </Pressable>\r\n                            </View>\r\n                        }\r\n                    />\r\n                }\r\n            </View>\r\n            {/* Group modal */}\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={modalVisible}\r\n                onRequestClose={() => {\r\n                    setModalVisible(!modalVisible);\r\n                }}\r\n            >\r\n                <View style={Styles.ModalRoot}>\r\n                    <View style={Styles.ModalContainer}>\r\n                        <Text style={Styles.InputHeader}>Group Tasker title</Text>\r\n                        <TextInput\r\n                            style={[Styles.Input, Styles.TextInput]}\r\n                            placeholder=\"Enter title here\"\r\n                            onChangeText={(text) => setGroupTitle(text)} />\r\n                        <View style={Styles.ButtonContainer}>\r\n                            <Pressable \r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Cancel]}\r\n                                onPress={() => setModalVisible(!modalVisible)}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Cancel</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Confirm]}\r\n                                onPress={() => setGroup()}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Save</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { FlatList, Pressable, Modal, Text, TextInput, View } from 'react-native';\r\nimport { Entypo } from '@expo/vector-icons';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { Styles } from '../Styles';\r\nimport { EmptyMsg } from '../components/EmptyMsg';\r\n\r\nexport function GroupTasker({ navigation, route }) {\r\n    // Groups\r\n    const [groups, setGroups] = useState([]);\r\n    const [currentItemId, setCurrentItemId] = useState();\r\n    const [currentItemTitle, setCurrentItemTitle] = useState();\r\n    // Modals\r\n    const [participantsModalVisible, setParticipantsModalVisible] = useState(false);\r\n    const [tasksModalVisible, setTasksModalVisible] = useState(false);\r\n    const [drawModalVisible, setDrawModalVisible] = useState(false);\r\n    // Group size\r\n    const [groupSize, setGroupSize] = useState(2);\r\n    const [decrementButtonState, setDecrementButtonState] = useState(true);\r\n    const [incrementButtonState, setIncrementButtonState] = useState(false);\r\n    // Participants\r\n    const [participants, setParticipants] = useState([]);\r\n    const [participantName, setParticipantName] = useState(\"\");\r\n    // Tasks\r\n    const [tasks, setTasks] = useState([]);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setGroups(route.params.groups);\r\n        setCurrentItemId(route.params.currentItemId);\r\n        setCurrentItemTitle(route.params.currentItemTitle);\r\n        setParticipants(route.params.currentItemParticipants);\r\n        setTasks(route.params.currentItemTasks);\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        storeData();\r\n    },[groups]);\r\n\r\n    // Set the group size and limit to minimum of 2 and maximum of participants / 2\r\n    const setStateGroupSize = (value) => {\r\n        if (value <= 2) {\r\n            setDecrementButtonState(true);\r\n            setGroupSize(2);\r\n        }\r\n        else if (value >= Math.floor(participants.length / 2)) {\r\n            setIncrementButtonState(true);\r\n            setGroupSize(Math.floor(participants.length / 2));\r\n        }\r\n        else {\r\n            setDecrementButtonState(false);\r\n            setIncrementButtonState(false);\r\n            setGroupSize(value);\r\n        }\r\n    };\r\n\r\n    // Add a new participant to the array\r\n    const setParticipant = () => {\r\n        setParticipants([...participants, {id: uuidv4(), name: participantName}]);\r\n        setParticipantName(\"\");\r\n    };\r\n\r\n    // Add a new task to the array\r\n    const setTask = () => {\r\n        setTasks([...tasks, {id: uuidv4(), title: taskTitle}]);\r\n        setTaskTitle(\"\");\r\n    };\r\n\r\n    // Remove the selected participant from the array\r\n    const removeParticipant = (id) => {\r\n        let array = participants.filter(item => item.id !== id);\r\n        setParticipants(array);\r\n        setParticipantsToGroup();\r\n    };\r\n\r\n    // Remove the selected task from the array\r\n    const removeTask= (id) => {\r\n        let array = tasks.filter(item => item.id !== id);\r\n        setTasks(array);\r\n        setTasksToGroup();\r\n    }\r\n\r\n    // Cancel changes made to the participants list\r\n    const cancelParticipantChanges = () => {\r\n        if(participants.length < 1) setParticipants([]);\r\n    };\r\n\r\n    // Cancel changes made to the tass list\r\n    const cancelTaskChanges = () => {\r\n        if(tasks.length < 1) setTasks([]);\r\n    };\r\n\r\n    // Add the added participants to the currently selected group\r\n    const setParticipantsToGroup = () => {\r\n        let group = groups.filter(item => item.id == currentItemId)[0];\r\n        let updatedGroup = {...group, participants: participants};\r\n        groups.splice(groups.findIndex(item => item.id == currentItemId), 1, updatedGroup);\r\n    };\r\n\r\n    // Add the added tasks to the currently selected group\r\n    const setTasksToGroup = () => {\r\n        let group = groups.filter(item => item.id == currentItemId)[0];\r\n        let updatedGroup = {...group, tasks: tasks};\r\n        groups.splice(groups.findIndex(item => item.id == currentItemId), 1, updatedGroup);\r\n    }\r\n\r\n    // Store data in local storage as JSON\r\n    const storeData = async () => {\r\n        try {\r\n            await AsyncStorage.setItem('@groups', JSON.stringify(groups));\r\n        }\r\n        catch (e) {\r\n            onsole.log(\"Something went wrong while saving the groups.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={Styles.Root}>\r\n            <View style={Styles.Container}>\r\n                <Text style={Styles.Header}>{currentItemTitle}</Text>\r\n                <Pressable\r\n                    style={[Styles.Button, Styles.ButtonVert, Styles.Continue]}\r\n                    onPress={() => setParticipantsModalVisible(!participantsModalVisible)}\r\n                >\r\n                    <Text style={Styles.ButtonText}>\r\n                        <Entypo name=\"users\" size={16} color=\"white\" /> Participants\r\n                    </Text>\r\n                </Pressable>\r\n                <Pressable\r\n                    style={[Styles.Button, Styles.ButtonVert, Styles.Continue]}\r\n                    onPress={() => setTasksModalVisible(!tasksModalVisible)}\r\n                >\r\n                    <Text style={Styles.ButtonText}>\r\n                        <Entypo name=\"list\" size={16} color=\"white\" /> Tasks\r\n                        </Text>\r\n                </Pressable>\r\n                <Pressable\r\n                    style={[Styles.Button, Styles.ButtonVert, Styles.Continue]}\r\n                    onPress={() => setDrawModalVisible(!drawModalVisible)}\r\n                >\r\n                    <Text style={Styles.ButtonText}>\r\n                        <Entypo name=\"shuffle\" size={16} color=\"white\" /> Draw\r\n                    </Text>\r\n                </Pressable>\r\n            </View>\r\n            {/* Participants modal */}\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={participantsModalVisible}\r\n                onRequestClose={() => {\r\n                    setParticipantsModalVisible(!participantsModalVisible);\r\n                }}\r\n            >\r\n                <View style={Styles.ModalRoot}>\r\n                    <View style={Styles.ModalContainer}>\r\n                        <Text style={Styles.InputHeader}>Add participants</Text>\r\n                        <View style={Styles.ButtonContainer}>\r\n                            <Pressable \r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Cancel]}\r\n                                onPress={() => {setParticipantsModalVisible(!participantsModalVisible), cancelParticipantChanges()}}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Cancel</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Confirm]}\r\n                                onPress={() => {setParticipantsModalVisible(!participantsModalVisible), setParticipantsToGroup()}}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Save</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                        <View style={Styles.ItemInputContainer}>\r\n                            <TextInput\r\n                                style={[Styles.Input, Styles.ItemInput]}\r\n                                value={participantName}\r\n                                placeholder=\"Enter name here\"\r\n                                onChangeText={(text) => setParticipantName(text)}\r\n                            />\r\n                            <Pressable\r\n                                style={Styles.ItemInputButton}\r\n                                onPress={() => setParticipant()}\r\n                            >\r\n                                <Entypo name=\"add-user\" size={16} color=\"white\" />\r\n                            </Pressable>\r\n                        </View>\r\n                        {(participants.length < 1) ? EmptyMsg(\"No participants yet...\") :\r\n                            <FlatList\r\n                                style={Styles.FlatList}\r\n                                data={participants}\r\n                                keyExtractor={(item, index) => index.toString()}\r\n                                renderItem={({ item }) =>\r\n                                    <View style={Styles.ItemContainer}>\r\n                                        <Pressable\r\n                                            style={Styles.ItemTitleContainer}\r\n                                            >\r\n                                            <Text style={Styles.ItemTitle}>{item.name}</Text>\r\n                                        </Pressable>\r\n                                        <Pressable\r\n                                            style={Styles.ItemButton}\r\n                                            onPress={() => removeParticipant(item.id)}\r\n                                            >\r\n                                            <Entypo name=\"cross\" size={20} color=\"white\" />\r\n                                        </Pressable>\r\n                                    </View>\r\n                                }\r\n                            />\r\n                        }\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n            {/* Tasks modal */}\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={tasksModalVisible}\r\n                onRequestClose={() => {\r\n                    setTasksModalVisible(!tasksModalVisible);\r\n                }}\r\n            >\r\n                <View style={Styles.ModalRoot}>\r\n                    <View style={Styles.ModalContainer}>\r\n                        <Text style={Styles.InputHeader}>Add tasks</Text>\r\n                        <View style={Styles.ButtonContainer}>\r\n                            <Pressable \r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Cancel]}\r\n                                onPress={() => {setTasksModalVisible(!tasksModalVisible), cancelTaskChanges()}}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Cancel</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Confirm]}\r\n                                onPress={() => {setTasksModalVisible(!tasksModalVisible), setTasksToGroup()}}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Save</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                        <View style={Styles.ItemInputContainer}>\r\n                            <TextInput\r\n                                style={[Styles.Input, Styles.ItemInput]}\r\n                                value={taskTitle}\r\n                                placeholder=\"Enter task here\"\r\n                                onChangeText={(text) => setTaskTitle(text)}\r\n                            />\r\n                            <Pressable\r\n                                style={Styles.ItemInputButton}\r\n                                onPress={() => setTask()}\r\n                            >\r\n                                <Entypo name=\"add-to-list\" size={16} color=\"white\" />\r\n                            </Pressable>\r\n                        </View>\r\n                        {(tasks.length < 1) ? EmptyMsg(\"No tasks yet...\") :\r\n                            <FlatList\r\n                                style={Styles.FlatList}\r\n                                data={tasks}\r\n                                keyExtractor={(item, index) => index.toString()}\r\n                                renderItem={({ item }) =>\r\n                                    <View style={Styles.ItemContainer}>\r\n                                        <Pressable\r\n                                            style={Styles.ItemTitleContainer}\r\n                                            >\r\n                                            <Text style={Styles.ItemTitle}>{item.title}</Text>\r\n                                        </Pressable>\r\n                                        <Pressable\r\n                                            style={Styles.ItemButton}\r\n                                            onPress={() => removeTask(item.id)}\r\n                                            >\r\n                                            <Entypo name=\"cross\" size={20} color=\"white\" />\r\n                                        </Pressable>\r\n                                    </View>\r\n                                }\r\n                            />\r\n                        }\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n            {/* group drawing modal */}\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={drawModalVisible}\r\n                onRequestClose={() => {\r\n                    setDrawModalVisible(!drawModalVisible);\r\n                }}\r\n            >\r\n                <View style={Styles.ModalRoot}>\r\n                    <View style={Styles.ModalContainer}>\r\n                        <Text style={Styles.InputHeader}>Group  size</Text>\r\n                        <View style={Styles.NumberInputContainer}>\r\n                            <Pressable\r\n                                disabled={decrementButtonState}\r\n                                style={[Styles.NumberInputButton, Styles.NumberInputButtonLeft]}\r\n                                onPress={() => setStateGroupSize(groupSize - 1)}\r\n                            >\r\n                                <Entypo name=\"minus\" size={24} color=\"white\" />\r\n                            </Pressable>\r\n                            <TextInput\r\n                                style={[Styles.Input, Styles.NumberInput]}\r\n                                keyboardType='numeric'\r\n                                value={groupSize}\r\n                            />\r\n                            <Pressable\r\n                            disabled={incrementButtonState}\r\n                                style={[Styles.NumberInputButton, Styles.NumberInputButtonRight]}\r\n                                onPress={() => setStateGroupSize(groupSize + 1)}\r\n                            >\r\n                                <Entypo name=\"plus\" size={24} color=\"white\" />\r\n                            </Pressable>\r\n                        </View>\r\n                        <View style={Styles.ButtonContainer}>\r\n                            <Pressable \r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Cancel]}\r\n                                onPress={() => setDrawModalVisible(!drawModalVisible)}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Cancel</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Confirm]}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Draw</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}","import * as React from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\n\r\nimport { HomeScreen } from './screens/HomeScreen'\r\nimport { GroupTasker } from './screens/GroupTasker';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator initialRouteName=\"Home\">\r\n        <Stack.Screen name='Home' component={HomeScreen} />\r\n        <Stack.Screen name='Group tasker' component={GroupTasker} />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"],"sourceRoot":""}