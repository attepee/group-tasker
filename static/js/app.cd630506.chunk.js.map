{"version":3,"sources":["Styles.js","components/EmptyMsg.js","screens/HomeScreen.js","screens/GroupTasker.js","App.js"],"names":["width","Dimensions","get","height","Styles","StyleSheet","create","Root","flex","alignItems","justifyContent","backgroundColor","Container","Input","borderStyle","borderWidth","borderColor","padding","InputHeader","fontSize","fontWeight","color","TextInput","borderRadius","margin","NumberInputContainer","flexDirection","NumberInputButton","NumberInputButtonLeft","borderBottomLeftRadius","borderTopLeftRadius","NumberInputButtonRight","borderBottomRightRadius","borderTopRightRadius","NumberInput","ItemInputContainer","ItemInput","ItemInputButton","ButtonContainer","Button","paddingVertical","paddingHorizontal","ButtonHor","ButtonVert","marginBottom","Confirm","Cancel","Continue","ButtonText","fontFamily","ModalRoot","ModalContainer","FlatList","maxHeight","ItemContainer","ItemTitleContainer","ItemTitle","textAlign","ItemButton","Header","EmptyMsg","msg","View","style","Text","HomeScreen","navigation","useState","groups","setGroups","groupTitle","setGroupTitle","modalVisible","setModalVisible","isFocused","useIsFocused","useEffect","getData","storeData","a","async","AsyncStorage","getItem","value","JSON","parse","console","log","setItem","stringify","onsole","Pressable","onPress","Entypo","name","size","length","data","keyExtractor","item","index","toString","renderItem","navigate","currentItemId","id","currentItemTitle","title","currentItemParticipants","participants","currentItemTasks","tasks","currentItemTeams","teams","array","filter","removeGroup","Modal","animationType","transparent","visible","onRequestClose","placeholder","onChangeText","text","uuidv4","GroupTasker","route","setCurrentItemId","setCurrentItemTitle","participantsModalVisible","setParticipantsModalVisible","tasksModalVisible","setTasksModalVisible","drawModalVisible","setDrawModalVisible","groupSize","setGroupSize","decrementButtonState","setDecrementButtonState","incrementButtonState","setIncrementButtonState","setParticipants","participantName","setParticipantName","setTasks","taskTitle","setTaskTitle","setTeams","params","checkInput","test","setParticipant","setTask","selectedToTeam","setParticipantsToGroup","updatedGroup","splice","findIndex","setTasksToGroup","setStateGroupSize","Math","floor","setTeamsToGroup","removeParticipant","removeTask","disabled","keyboardType","selectedTeams","members","i","j","selectableParticipants","obj","r","random","selectedParticipant","participantIndex","push","drawTeams","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","component"],"mappings":"4TAEMA,EAAQC,UAAWC,IAAI,UAAUF,MACjCG,EAASF,UAAWC,IAAI,UAAUC,OAE3BC,EAASC,UAAWC,OAAO,CAEpCC,KAAM,CACFC,KAAM,EACNC,WAAY,SACZC,eAAgB,SAChBC,gBAAiB,QAGrBC,UAAW,CACPZ,MAASA,EAAQ,IAAO,MAAQ,MAChCS,WAAY,SACZC,eAAgB,UAGpBG,MAAO,CACHF,gBAAiB,OACjBG,YAAa,QACbC,YAAa,EACbC,YAAa,OACbC,QAAS,IAEbC,YAAa,CACTlB,MAAO,OACPmB,SAAU,GACVC,WAAY,OACZC,MAAO,QAEXC,UAAW,CACPtB,MAAO,OACPuB,aAAc,EACdC,OAAQ,IAEZC,qBAAsB,CAClBzB,MAAO,OACP0B,cAAe,MACfhB,eAAgB,SAChBc,OAAQ,IAEZG,kBAAmB,CACfjB,eAAgB,SAChBD,WAAY,SACZT,MAAO,MACPW,gBAAiB,OACjBS,WAAY,OACZC,MAAO,QAEXO,sBAAuB,CACnBC,uBAAwB,EACxBC,oBAAqB,GAEzBC,uBAAwB,CACpBC,wBAAyB,EACzBC,qBAAsB,GAE1BC,YAAa,CACTlC,MAAO,OAEXmC,mBAAoB,CAChBnC,MAAO,OACP0B,cAAe,MACfhB,eAAgB,SAChBc,OAAQ,IAEZY,UAAW,CACPpC,MAAO,MACP6B,uBAAwB,EACxBC,oBAAqB,GAEzBO,gBAAiB,CACb3B,eAAgB,SAChBD,WAAY,SACZT,MAAO,MACPW,gBAAiB,OACjBS,WAAY,OACZC,MAAO,OACPW,wBAAyB,EACzBC,qBAAsB,GAG1BK,gBAAiB,CACbtC,MAAO,OACP0B,cAAe,MACfhB,eAAgB,gBAChBc,OAAQ,IAEZe,OAAQ,CACJC,gBAAiB,GACjBC,kBAAmB,GACnBlB,aAAc,EACdd,WAAY,UAEhBiC,UAAW,CACP1C,MAAO,OAEX2C,WAAY,CACR3C,MAAO,OACP4C,aAAc,IAElBC,QAAS,CACLlC,gBAAiB,WAErBmC,OAAQ,CACJnC,gBAAiB,WAErBoC,SAAU,CACNpC,gBAAiB,WAErBqC,WAAY,CACR7B,SAAU,GACV8B,WAAY,aACZ7B,WAAY,OACZC,MAAO,QAGX6B,UAAW,CACP1C,KAAM,EACNC,WAAY,SACZC,eAAgB,SAChBC,gBAAiB,QAErBwC,eAAgB,CACZnD,MAASA,EAAQ,IAAO,MAAQ,MAChCS,WAAY,SACZC,eAAgB,UAGpB0C,SAAU,CACNpD,MAAO,OACPqD,UAAoB,GAATlD,GAEfmD,cAAe,CACXtD,MAAO,OACP0B,cAAe,MACfhB,eAAgB,SAChBkC,aAAc,IAElBW,mBAAoB,CAChBvD,MAAO,MACPc,YAAa,QACbC,YAAa,EACbC,YAAa,OACba,uBAAwB,EACxBC,oBAAqB,EACrBb,QAAS,IAEbuC,UAAW,CACPrC,SAAU,GACVC,WAAY,OACZC,MAAO,OACPoC,UAAW,UAEfC,WAAY,CACRhD,eAAgB,SAChBD,WAAY,SACZT,MAAO,MACPW,gBAAiB,OACjBS,WAAY,OACZC,MAAO,OACPW,wBAAyB,EACzBC,qBAAsB,GAG1B0B,OAAQ,CACJ3D,MAAO,OACPmB,SAAU,GACVC,WAAY,OACZC,MAAO,OACPuB,aAAc,M,OC1Kf,SAASgB,EAASC,GACrB,OACI,cAACC,EAAA,QAAD,CAAMC,MAAO,CAACrD,eAAgB,SAAUD,WAAY,SAAUD,KAAM,GAApE,SACI,cAACwD,EAAA,QAAD,CAAMD,MAAO,CAAC1C,MAAO,OAAQF,SAAU,GAAIsC,UAAW,SAAUxC,QAAS,IAAzE,SAA+E4C,MCKpF,SAASI,EAAT,GAAqC,IAAfC,EAAc,EAAdA,WACzB,EAA4BC,mBAAS,IAArC,WAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,qBAApC,WAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAwCJ,oBAAS,GAAjD,WAAOK,EAAP,KAAqBC,EAArB,KACMC,EAAYC,yBAElBC,qBAAU,WAAWF,GACjBG,MACD,CAACF,iBAEJC,qBAAU,WACNE,MACF,CAACV,IAGH,IAaMS,EAAU,0BAAAE,EAAAC,OAAA,2EAAAD,EAAA,MAEYE,UAAaC,QAAQ,YAFjC,OAGK,QADPC,EAFE,SAGWd,EAAUe,KAAKC,MAAMF,IAHhC,gDAMRG,QAAQC,IAAI,8CANJ,iEAWVT,EAAY,oBAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEJE,UAAaO,QAAQ,UAAWJ,KAAKK,UAAUrB,KAF3C,sDAKVsB,OAAOH,IAAI,iDALD,gEASlB,OACI,eAACzB,EAAA,QAAD,CAAMC,MAAO3D,EAAOG,KAApB,UACI,eAACuD,EAAA,QAAD,CAAMC,MAAO3D,EAAOQ,UAApB,UACI,cAAC+E,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOuC,WAAYvC,EAAO2C,UACjD6C,QAAS,kBAAMnB,GAAiBD,IAFpC,SAII,eAACR,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,UACI,cAAC6C,EAAA,QAAD,CAAQC,KAAK,QAAQC,KAAM,GAAI1E,MAAM,UADzC,YAIF+C,EAAO4B,OAAS,EAAKpC,EAAS,oBAC5B,cAACR,EAAA,QAAD,CACIW,MAAO3D,EAAOgD,SACd6C,KAAM7B,EACN8B,aAAc,SAACC,EAAMC,GAAP,OAAiBA,EAAMC,YACrCC,WAAY,gBAAGH,EAAH,EAAGA,KAAH,OACR,eAACrC,EAAA,QAAD,CAAMC,MAAO3D,EAAOkD,cAApB,UACI,cAACqC,EAAA,QAAD,CACI5B,MAAO3D,EAAOmD,mBACdqC,QAAS,kBAAM1B,EAAWqC,SAAS,eAAgB,CAC/CnC,OAAQA,EACRoC,cAAeL,EAAKM,GACpBC,iBAAkBP,EAAKQ,MACvBC,wBAAyBT,EAAKU,aAC9BC,iBAAkBX,EAAKY,MACvBC,iBAAkBb,EAAKc,SAR/B,SAWI,cAACjD,EAAA,QAAD,CAAMD,MAAO3D,EAAOoD,UAApB,SAAgC2C,EAAKQ,UAEzC,cAAChB,EAAA,QAAD,CACI5B,MAAO3D,EAAOsD,WACdkC,QAAS,kBA3DrB,SAACa,GACjB,IAAIS,EAAQ9C,EAAO+C,QAAO,SAAAhB,GAAI,OAAIA,EAAKM,KAAOA,KAC9CpC,EAAU6C,GAyDiCE,CAAYjB,EAAKM,KAFpC,SAII,cAACZ,EAAA,QAAD,CAAQC,KAAK,QAAQC,KAAM,GAAI1E,MAAM,qBAQ7D,cAACgG,EAAA,QAAD,CACIC,cAAc,QACdC,aAAa,EACbC,QAAShD,EACTiD,eAAgB,WACZhD,GAAiBD,IALzB,SAQI,cAACV,EAAA,QAAD,CAAMC,MAAO3D,EAAO8C,UAApB,SACI,eAACY,EAAA,QAAD,CAAMC,MAAO3D,EAAO+C,eAApB,UACI,cAACa,EAAA,QAAD,CAAMD,MAAO3D,EAAOc,YAApB,gCACA,cAACI,EAAA,QAAD,CACIyC,MAAO,CAAC3D,EAAOS,MAAOT,EAAOkB,WAC7BoG,YAAY,mBACZC,aAAc,SAACC,GAAD,OAAUrD,EAAcqD,MAC1C,eAAC9D,EAAA,QAAD,CAAMC,MAAO3D,EAAOkC,gBAApB,UACI,cAACqD,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOsC,UAAWtC,EAAO0C,QAChD8C,QAAS,kBAAMnB,GAAiBD,IAFpC,SAII,cAACR,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,sBAEJ,cAAC2C,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOsC,UAAWtC,EAAOyC,SAChD+C,QAAS,kBAnGjCvB,EAAU,GAAD,WAAKD,GAAL,CAAa,CAACqC,GAAIoB,oBAAUlB,MAAOrC,EAAYuC,aAAc,GAAIE,MAAO,GAAIE,MAAO,OAC5FnC,SACAL,GAAiBD,IA+FG,SAII,cAACR,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,iC,qlBCtHzB,SAAS8E,EAAT,GAA4C,EAArB5D,WAAsB,IAAV6D,EAAS,EAATA,MAEtC,EAA4B5D,mBAAS,IAArC,WAAOC,EAAP,KAAeC,EAAf,KACA,EAA0CF,qBAA1C,WAAOqC,EAAP,KAAsBwB,EAAtB,KACA,EAAgD7D,qBAAhD,WAAOuC,EAAP,KAAyBuB,EAAzB,KAEA,EAAgE9D,oBAAS,GAAzE,WAAO+D,EAAP,KAAiCC,EAAjC,KACA,EAAkDhE,oBAAS,GAA3D,WAAOiE,EAAP,KAA0BC,EAA1B,KACA,EAAgDlE,oBAAS,GAAzD,WAAOmE,EAAP,KAAyBC,EAAzB,KAEA,EAAkCpE,mBAAS,GAA3C,WAAOqE,EAAP,KAAkBC,EAAlB,KACA,EAAwDtE,oBAAS,GAAjE,WAAOuE,EAAP,KAA6BC,EAA7B,KACA,EAAwDxE,oBAAS,GAAjE,WAAOyE,EAAP,KAA6BC,GAA7B,KAEA,GAAwC1E,mBAAS,IAAjD,aAAO0C,GAAP,MAAqBiC,GAArB,MACA,GAA8C3E,mBAAS,IAAvD,aAAO4E,GAAP,MAAwBC,GAAxB,MAEA,GAA0B7E,mBAAS,IAAnC,aAAO4C,GAAP,MAAckC,GAAd,MACA,GAAkC9E,mBAAS,IAA3C,aAAO+E,GAAP,MAAkBC,GAAlB,MAEA,GAA0BhF,mBAAS,IAAnC,aAAO8C,GAAP,MAAcmC,GAAd,MAEAxE,qBAAU,WACe,GAAjBR,EAAO4B,SACP3B,EAAU0D,EAAMsB,OAAOjF,QACvB4D,EAAiBD,EAAMsB,OAAO7C,eAC9ByB,EAAoBF,EAAMsB,OAAO3C,kBACjCoC,GAAgBf,EAAMsB,OAAOzC,yBAC7BqC,GAASlB,EAAMsB,OAAOvC,kBACtBsC,GAASrB,EAAMsB,OAAOrC,sBAI9B,IAAMsC,GAAa,SAAC1B,GACZM,EACAc,GAAmBpB,GAEnBuB,GAAavB,GAEb,cAAW2B,KAAK3B,KACZM,EACAsB,KAEAC,OAKND,GAAiB,WACnBV,GAAgB,GAAD,WAAKjC,IAAL,CAAmB,CAACJ,GAAIoB,oBAAU/B,KAAMiD,GAAiBW,gBAAgB,MACxFV,GAAmB,KAIjBS,GAAU,WACZR,GAAS,GAAD,WAAKlC,IAAL,CAAY,CAACN,GAAIoB,oBAAUlB,MAAOuC,OAC1CC,GAAa,KA4BXQ,GAAyB,WAC3B,IACIC,EAAY,OADJxF,EAAO+C,QAAO,SAAAhB,GAAI,OAAIA,EAAKM,IAAMD,KAAe,IAC5C,IAAcK,aAAcA,KAC5CzC,EAAOyF,OAAOzF,EAAO0F,WAAU,SAAA3D,GAAI,OAAIA,EAAKM,IAAMD,KAAgB,EAAGoD,GACrE9E,MAIEiF,GAAkB,WACpB,IACIH,EAAY,OADJxF,EAAO+C,QAAO,SAAAhB,GAAI,OAAIA,EAAKM,IAAMD,KAAe,IAC5C,IAAcO,MAAOA,KACrC3C,EAAOyF,OAAOzF,EAAO0F,WAAU,SAAA3D,GAAI,OAAIA,EAAKM,IAAMD,KAAgB,EAAGoD,GACrE9E,MAIEkF,GAAoB,SAAC7E,GACnBA,GAAS,GACTwD,GAAwB,GACxBE,IAAwB,GACxBJ,EAAa,IAERtD,GAAS8E,KAAKC,MAAMrD,GAAab,OAASe,GAAMf,SACrD6C,IAAwB,GACxBF,GAAwB,GACxBF,EAAawB,KAAKC,MAAMrD,GAAab,OAASe,GAAMf,WAGpD2C,GAAwB,GACxBE,IAAwB,GACxBJ,EAAatD,KAgCfgF,GAAkB,WACpB,IACIP,EAAY,OADJxF,EAAO+C,QAAO,SAAAhB,GAAI,OAAIA,EAAKM,IAAMD,KAAe,IAC5C,IAAcS,MAAOA,KACrC7C,EAAOyF,OAAOzF,EAAO0F,WAAU,SAAA3D,GAAI,OAAIA,EAAKM,IAAMD,KAAgB,EAAGoD,GACrE9E,MAIEA,GAAY,oBAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEJE,UAAaO,QAAQ,UAAWJ,KAAKK,UAAUrB,KAF3C,sDAKVsB,OAAOH,IAAI,uDALD,gEASlB,OACI,eAACzB,EAAA,QAAD,CAAMC,MAAO3D,EAAOG,KAApB,UACI,eAACuD,EAAA,QAAD,CAAMC,MAAO3D,EAAOQ,UAApB,UACI,cAACoD,EAAA,QAAD,CAAMD,MAAO3D,EAAOuD,OAApB,SAA6B+C,IAC7B,cAACf,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOuC,WAAYvC,EAAO2C,UACjD6C,QAAS,kBAAMuC,GAA6BD,IAFhD,SAII,eAAClE,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,UACI,cAAC6C,EAAA,QAAD,CAAQC,KAAK,QAAQC,KAAM,GAAI1E,MAAM,UADzC,qBAIJ,cAACsE,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOuC,WAAYvC,EAAO2C,UACjD6C,QAAS,kBAAMyC,GAAsBD,IAFzC,SAII,eAACpE,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,UACI,cAAC6C,EAAA,QAAD,CAAQC,KAAK,OAAOC,KAAM,GAAI1E,MAAM,UADxC,cAIJ,cAACsE,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOuC,WAAYvC,EAAO2C,UACjD6C,QAAS,kBAAM2C,GAAqBD,IAFxC,SAII,eAACtE,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,UACI,cAAC6C,EAAA,QAAD,CAAQC,KAAK,UAAUC,KAAM,GAAI1E,MAAM,UAD3C,gBAMR,cAACgG,EAAA,QAAD,CACIC,cAAc,QACdC,aAAa,EACbC,QAASU,EACTT,eAAgB,WAAOU,GAA6BD,IAJxD,SAMI,cAACpE,EAAA,QAAD,CAAMC,MAAO3D,EAAO8C,UAApB,SACI,eAACY,EAAA,QAAD,CAAMC,MAAO3D,EAAO+C,eAApB,UACI,cAACa,EAAA,QAAD,CAAMD,MAAO3D,EAAOc,YAApB,8BACA,eAAC4C,EAAA,QAAD,CAAMC,MAAO3D,EAAOkC,gBAApB,UACI,cAACqD,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOsC,UAAWtC,EAAO0C,QAChD8C,QAAS,WACLuC,GAA6BD,GAnItDrB,GAAab,OAAS,GAAG8C,GAAgB,KAgIxB,SAOI,cAAC9E,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,sBAEJ,cAAC2C,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOsC,UAAWtC,EAAOyC,SAChD+C,QAAS,WACLuC,GAA6BD,GAC7ByB,MAJR,SAOI,cAAC3F,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,uBAGR,eAACc,EAAA,QAAD,CAAMC,MAAO3D,EAAO+B,mBAApB,UACI,cAACb,EAAA,QAAD,CACIyC,MAAO,CAAC3D,EAAOS,MAAOT,EAAOgC,WAC7B+C,MAAO4D,GACPrB,YAAY,kBACZC,aAAc,SAACC,GAAD,OAAU0B,GAAW1B,MAEvC,cAACjC,EAAA,QAAD,CACI5B,MAAO3D,EAAOiC,gBACduD,QAAS,kBAAM4D,MAFnB,SAII,cAAC3D,EAAA,QAAD,CAAQC,KAAK,WAAWC,KAAM,GAAI1E,MAAM,eAG9CwF,GAAab,OAAS,EAAKpC,EAAS,0BAClC,cAACR,EAAA,QAAD,CACIW,MAAO3D,EAAOgD,SACd6C,KAAMY,GACNX,aAAc,SAACC,EAAMC,GAAP,OAAiBA,EAAMC,YACrCC,WAAY,gBAAGH,EAAH,EAAGA,KAAH,OACR,eAACrC,EAAA,QAAD,CAAMC,MAAO3D,EAAOkD,cAApB,UACI,cAACqC,EAAA,QAAD,CACI5B,MAAO3D,EAAOmD,mBADlB,SAGI,cAACS,EAAA,QAAD,CAAMD,MAAO3D,EAAOoD,UAApB,SAAgC2C,EAAKL,SAEzC,cAACH,EAAA,QAAD,CACI5B,MAAO3D,EAAOsD,WACdkC,QAAS,kBA9LvB,SAACa,GACvB,IAAIS,EAAQL,GAAaM,QAAO,SAAAhB,GAAI,OAAIA,EAAKM,KAAOA,KACpDqC,GAAgB5B,GAChByC,KA2LmDS,CAAkBjE,EAAKM,KAF1C,SAII,cAACZ,EAAA,QAAD,CAAQC,KAAK,QAAQC,KAAM,GAAI1E,MAAM,yBAUrE,cAACgG,EAAA,QAAD,CACIC,cAAc,QACdC,aAAa,EACbC,QAASY,EACTX,eAAgB,WAAOY,GAAsBD,IAJjD,SAMI,cAACtE,EAAA,QAAD,CAAMC,MAAO3D,EAAO8C,UAApB,SACI,eAACY,EAAA,QAAD,CAAMC,MAAO3D,EAAO+C,eAApB,UACI,cAACa,EAAA,QAAD,CAAMD,MAAO3D,EAAOc,YAApB,uBACA,eAAC4C,EAAA,QAAD,CAAMC,MAAO3D,EAAOkC,gBAApB,UACI,cAACqD,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOsC,UAAWtC,EAAO0C,QAChD8C,QAAS,WACLyC,GAAsBD,GAnM/CrB,GAAMf,OAAS,GAAGiD,GAAS,KAgMV,SAOI,cAACjF,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,sBAEJ,cAAC2C,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOsC,UAAWtC,EAAOyC,SAChD+C,QAAS,WACLyC,GAAsBD,GACtB2B,MAJR,SAOI,cAAC/F,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,uBAGR,eAACc,EAAA,QAAD,CAAMC,MAAO3D,EAAO+B,mBAApB,UACI,cAACb,EAAA,QAAD,CACIyC,MAAO,CAAC3D,EAAOS,MAAOT,EAAOgC,WAC7B+C,MAAO+D,GACPxB,YAAY,kBACZC,aAAc,SAACC,GAAD,OAAU0B,GAAW1B,MAEvC,cAACjC,EAAA,QAAD,CACI5B,MAAO3D,EAAOiC,gBACduD,QAAS,kBAAM6D,MAFnB,SAII,cAAC5D,EAAA,QAAD,CAAQC,KAAK,cAAcC,KAAM,GAAI1E,MAAM,eAGjD0F,GAAMf,OAAS,EAAKpC,EAAS,mBAC3B,cAACR,EAAA,QAAD,CACIW,MAAO3D,EAAOgD,SACd6C,KAAMc,GACNb,aAAc,SAACC,EAAMC,GAAP,OAAiBA,EAAMC,YACrCC,WAAY,gBAAGH,EAAH,EAAGA,KAAH,OACR,eAACrC,EAAA,QAAD,CAAMC,MAAO3D,EAAOkD,cAApB,UACI,cAACqC,EAAA,QAAD,CACI5B,MAAO3D,EAAOmD,mBADlB,SAGI,cAACS,EAAA,QAAD,CAAMD,MAAO3D,EAAOoD,UAApB,SAAgC2C,EAAKQ,UAEzC,cAAChB,EAAA,QAAD,CACI5B,MAAO3D,EAAOsD,WACdkC,QAAS,kBA5P/B,SAACa,GACf,IAAIS,EAAQH,GAAMI,QAAO,SAAAhB,GAAI,OAAIA,EAAKM,KAAOA,KAC7CwC,GAAS/B,GACT6C,KAyPmDM,CAAWlE,EAAKM,KAFnC,SAII,cAACZ,EAAA,QAAD,CAAQC,KAAK,QAAQC,KAAM,GAAI1E,MAAM,yBAUrE,cAACgG,EAAA,QAAD,CACIC,cAAc,QACdC,aAAa,EACbC,QAASc,EACTb,eAAgB,WAAOc,GAAqBD,IAJhD,SAMI,cAACxE,EAAA,QAAD,CAAMC,MAAO3D,EAAO8C,UAApB,SACI,eAACY,EAAA,QAAD,CAAMC,MAAO3D,EAAO+C,eAApB,UACI,cAACa,EAAA,QAAD,CAAMD,MAAO3D,EAAOc,YAApB,uBACA,eAAC4C,EAAA,QAAD,CAAMC,MAAO3D,EAAOqB,qBAApB,UACI,cAACkE,EAAA,QAAD,CACI2E,SAAU5B,EACV3E,MAAO,CAAC3D,EAAOuB,kBAAmBvB,EAAOwB,uBACzCgE,QAAS,kBAAMoE,GAAkBxB,EAAY,IAHjD,SAKI,cAAC3C,EAAA,QAAD,CAAQC,KAAK,QAAQC,KAAM,GAAI1E,MAAM,YAEzC,cAACC,EAAA,QAAD,CACIyC,MAAO,CAAC3D,EAAOS,MAAOT,EAAO8B,aAC7BqI,aAAa,UACbpF,MAAOqD,IAEX,cAAC7C,EAAA,QAAD,CACI2E,SAAU1B,EACV7E,MAAO,CAAC3D,EAAOuB,kBAAmBvB,EAAO2B,wBACzC6D,QAAS,kBAAMoE,GAAkBxB,EAAY,IAHjD,SAKI,cAAC3C,EAAA,QAAD,CAAQC,KAAK,OAAOC,KAAM,GAAI1E,MAAM,eAG5C,eAACyC,EAAA,QAAD,CAAMC,MAAO3D,EAAOkC,gBAApB,UACI,cAACqD,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOsC,UAAWtC,EAAO0C,QAChD8C,QAAS,kBAAM2C,GAAqBD,IAFxC,SAII,cAACtE,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,sBAEJ,cAAC2C,EAAA,QAAD,CACI5B,MAAO,CAAC3D,EAAOmC,OAAQnC,EAAOsC,UAAWtC,EAAOyC,SAChD+C,QAAS,kBAxPnB,WAId,IAHA,IAAI4E,EAAgB,GAChBC,EAAU,GAELC,EAAI,EAAGA,EAAI3D,GAAMf,OAAQ0E,IAAK,CACnC,IADoC,IAAD,WAC1BC,GACL,IAAIC,EAAyB/D,GAAaM,QAAO,SAAA0D,GAAG,OAA0B,GAAtBA,EAAInB,kBACxDoB,EAAIb,KAAKC,MAAMD,KAAKc,SAAWH,EAAuB5E,QACtDgF,EAAsBJ,EAAuBE,GAC7CG,EAAmBpE,GAAaiD,WAAU,SAAAe,GAAG,OAAIA,EAAIpE,IAAMuE,EAAoBvE,MAEnFgE,EAAQS,KAAKN,EAAuBE,GAAGhF,MACvCe,GAAaoE,GAAkBvB,gBAAiB,GAP3CiB,EAAI,EAAGA,EAAInC,EAAWmC,IAAM,IASrCH,EAAa,cAAOA,GAAP,CAAsB,CAAC7D,MAAOI,GAAM2D,GAAG/D,MAAO8D,QAASA,KACpEA,EAAU,GAEdrB,GAASoB,GACTL,KAEA5B,GAAqBD,GAoOkB6C,IAFnB,SAII,cAACnH,EAAA,QAAD,CAAMD,MAAO3D,EAAO4C,WAApB,iCCvXhC,IAAMoI,EAAQC,oBAEC,SAASC,IACtB,OACE,cAACC,EAAA,QAAD,UACE,eAACH,EAAMI,UAAP,CAAiBC,iBAAiB,OAAlC,UACE,cAACL,EAAMM,OAAP,CAAc5F,KAAK,OAAO6F,UAAW1H,IACrC,cAACmH,EAAMM,OAAP,CAAc5F,KAAK,eAAe6F,UAAW7D,W","file":"static/js/app.cd630506.chunk.js","sourcesContent":["import { Dimensions, StyleSheet } from 'react-native';\r\n\r\nconst width = Dimensions.get('window').width;\r\nconst height = Dimensions.get('window').height;\r\n\r\nexport const Styles = StyleSheet.create({\r\n    // Root\r\n    Root: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#fff'\r\n    },\r\n    // Container\r\n    Container: {\r\n        width: ((width < 768) ? '90%' : '30%'),\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    // Inputs\r\n    Input: {\r\n        backgroundColor: '#fff',\r\n        borderStyle: 'solid',\r\n        borderWidth: 2,\r\n        borderColor: '#333',\r\n        padding: 10\r\n    },\r\n    InputHeader: {\r\n        width: '100%',\r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        color: '#333'\r\n    },\r\n    TextInput: {\r\n        width: '100%',\r\n        borderRadius: 5,\r\n        margin: 10\r\n    },\r\n    NumberInputContainer: {\r\n        width: '100%',\r\n        flexDirection: \"row\",\r\n        justifyContent: 'center',\r\n        margin: 10\r\n    },\r\n    NumberInputButton: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '20%',\r\n        backgroundColor: '#333',\r\n        fontWeight: 'bold',\r\n        color: '#fff'\r\n    },\r\n    NumberInputButtonLeft: {\r\n        borderBottomLeftRadius: 5,\r\n        borderTopLeftRadius: 5\r\n    },\r\n    NumberInputButtonRight: {\r\n        borderBottomRightRadius: 5,\r\n        borderTopRightRadius: 5\r\n    },\r\n    NumberInput: {\r\n        width: '60%'\r\n    },\r\n    ItemInputContainer: {\r\n        width: '100%',\r\n        flexDirection: \"row\",\r\n        justifyContent: 'center',\r\n        margin: 10\r\n    },\r\n    ItemInput: {\r\n        width: '80%',\r\n        borderBottomLeftRadius: 5,\r\n        borderTopLeftRadius: 5\r\n    },\r\n    ItemInputButton: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '20%',\r\n        backgroundColor: '#333',\r\n        fontWeight: 'bold',\r\n        color: '#fff',\r\n        borderBottomRightRadius: 5,\r\n        borderTopRightRadius: 5\r\n    },\r\n    //Buttons\r\n    ButtonContainer: {\r\n        width: '100%',\r\n        flexDirection: \"row\",\r\n        justifyContent: 'space-between',\r\n        margin: 10\r\n    },\r\n    Button: {\r\n        paddingVertical: 12,\r\n        paddingHorizontal: 32,\r\n        borderRadius: 4,\r\n        alignItems: 'center',\r\n    },\r\n    ButtonHor: {\r\n        width: '48%',\r\n    },\r\n    ButtonVert: {\r\n        width: '100%',\r\n        marginBottom: 10\r\n    },\r\n    Confirm: {\r\n        backgroundColor: '#4EDA25'\r\n    },\r\n    Cancel: {\r\n        backgroundColor: '#DA5625'\r\n    },\r\n    Continue: {\r\n        backgroundColor: '#25A9DA'\r\n    },\r\n    ButtonText: {\r\n        fontSize: 16,\r\n        fontFamily: 'sans-serif',\r\n        fontWeight: 'bold',\r\n        color: '#fff'\r\n    },\r\n    // Modal\r\n    ModalRoot: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#fff'\r\n    },\r\n    ModalContainer: {\r\n        width: ((width < 768) ? '90%' : '30%'),\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    // FlatList\r\n    FlatList: {\r\n        width: '100%',\r\n        maxHeight: height * 0.4\r\n    },\r\n    ItemContainer: {\r\n        width: '100%',\r\n        flexDirection: \"row\",\r\n        justifyContent: 'center',\r\n        marginBottom: 10,\r\n    },\r\n    ItemTitleContainer: {\r\n        width: '80%',\r\n        borderStyle: 'solid',\r\n        borderWidth: 2,\r\n        borderColor: '#333',\r\n        borderBottomLeftRadius: 5,\r\n        borderTopLeftRadius: 5,\r\n        padding: 10\r\n    },\r\n    ItemTitle: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        color: '#333',\r\n        textAlign: 'center'\r\n    },\r\n    ItemButton: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '20%',\r\n        backgroundColor: '#333',\r\n        fontWeight: 'bold',\r\n        color: '#fff',\r\n        borderBottomRightRadius: 5,\r\n        borderTopRightRadius: 5\r\n    },\r\n    // Misc\r\n    Header: {\r\n        width: '100%',\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        color: '#333',\r\n        marginBottom: 10\r\n    }\r\n});","import * as React from 'react';\r\nimport { Text, View } from 'react-native';\r\n\r\nexport function EmptyMsg(msg) {\r\n    return (\r\n        <View style={{justifyContent: 'center', alignItems: 'center', flex: 1}}>\r\n            <Text style={{color: '#333', fontSize: 24, textAlign: 'center', padding: 20}}>{msg}</Text>\r\n        </View>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { FlatList, Pressable, Modal, Text, TextInput, View } from 'react-native';\r\nimport { Entypo } from '@expo/vector-icons';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport 'react-native-get-random-values';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useIsFocused } from '@react-navigation/native';\r\n\r\nimport { Styles } from '../Styles';\r\nimport { EmptyMsg } from '../components/EmptyMsg';\r\n\r\nexport function HomeScreen({ navigation }) {\r\n    const [groups, setGroups] = useState([]);\r\n    const [groupTitle, setGroupTitle] = useState();\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const isFocused = useIsFocused();\r\n\r\n    useEffect(() => { if(isFocused) {\r\n        getData();\r\n    }},[useIsFocused]);\r\n\r\n    useEffect(() => {\r\n        storeData();\r\n    },[groups]);\r\n\r\n    // Add new group to the array\r\n    const setGroup = () => {\r\n        setGroups([...groups, {id: uuidv4(), title: groupTitle, participants: [], tasks: [], teams: []}]);\r\n        storeData();\r\n        setModalVisible(!modalVisible);\r\n    };\r\n\r\n    // Remove the selected group from the array\r\n    const removeGroup = (id) => {\r\n        let array = groups.filter(item => item.id !== id);\r\n        setGroups(array);\r\n    };\r\n\r\n    // Get and parse JSON data from the local storage\r\n    const getData = async () => {\r\n        try {\r\n            const value = await AsyncStorage.getItem('@groups')\r\n            if(value !== null) setGroups(JSON.parse(value));\r\n        }\r\n        catch(e) {\r\n            console.log(\"Something went wrong while loading groups.\");\r\n        }\r\n    };\r\n\r\n    // Store data in local storage as JSON\r\n    const storeData = async () => {\r\n        try {\r\n            await AsyncStorage.setItem('@groups', JSON.stringify(groups));\r\n        }\r\n        catch (e) {\r\n            onsole.log(\"Something went wrong while saving the groups.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={Styles.Root}>\r\n            <View style={Styles.Container}>\r\n                <Pressable\r\n                    style={[Styles.Button, Styles.ButtonVert, Styles.Continue]}\r\n                    onPress={() => setModalVisible(!modalVisible)}\r\n                >\r\n                    <Text style={Styles.ButtonText}>\r\n                        <Entypo name=\"users\" size={16} color=\"white\" /> New\r\n                    </Text>\r\n                </Pressable>\r\n                {(groups.length < 1) ? EmptyMsg(\"No groups yet...\") :\r\n                    <FlatList\r\n                        style={Styles.FlatList}\r\n                        data={groups}\r\n                        keyExtractor={(item, index) => index.toString()}\r\n                        renderItem={({ item }) =>\r\n                            <View style={Styles.ItemContainer}>\r\n                                <Pressable\r\n                                    style={Styles.ItemTitleContainer}\r\n                                    onPress={() => navigation.navigate(\"Group tasker\", {\r\n                                        groups: groups,\r\n                                        currentItemId: item.id,\r\n                                        currentItemTitle: item.title,\r\n                                        currentItemParticipants: item.participants,\r\n                                        currentItemTasks: item.tasks,\r\n                                        currentItemTeams: item.teams\r\n                                    })}\r\n                                >\r\n                                    <Text style={Styles.ItemTitle}>{item.title}</Text>\r\n                                </Pressable>\r\n                                <Pressable\r\n                                    style={Styles.ItemButton}\r\n                                    onPress={() => removeGroup(item.id)}\r\n                                >\r\n                                    <Entypo name=\"cross\" size={20} color=\"white\" />\r\n                                </Pressable>\r\n                            </View>\r\n                        }\r\n                    />\r\n                }\r\n            </View>\r\n            {/* Group modal */}\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={modalVisible}\r\n                onRequestClose={() => {\r\n                    setModalVisible(!modalVisible);\r\n                }}\r\n            >\r\n                <View style={Styles.ModalRoot}>\r\n                    <View style={Styles.ModalContainer}>\r\n                        <Text style={Styles.InputHeader}>Group Tasker title</Text>\r\n                        <TextInput\r\n                            style={[Styles.Input, Styles.TextInput]}\r\n                            placeholder=\"Enter title here\"\r\n                            onChangeText={(text) => setGroupTitle(text)} />\r\n                        <View style={Styles.ButtonContainer}>\r\n                            <Pressable \r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Cancel]}\r\n                                onPress={() => setModalVisible(!modalVisible)}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Cancel</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Confirm]}\r\n                                onPress={() => setGroup()}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Save</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { FlatList, Pressable, Modal, Text, TextInput, View } from 'react-native';\r\nimport { Entypo } from '@expo/vector-icons';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport 'react-native-get-random-values';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { Styles } from '../Styles';\r\nimport { EmptyMsg } from '../components/EmptyMsg';\r\n\r\nexport function GroupTasker({ navigation, route }) {\r\n    // Groups\r\n    const [groups, setGroups] = useState([]);\r\n    const [currentItemId, setCurrentItemId] = useState();\r\n    const [currentItemTitle, setCurrentItemTitle] = useState();\r\n    // Modals\r\n    const [participantsModalVisible, setParticipantsModalVisible] = useState(false);\r\n    const [tasksModalVisible, setTasksModalVisible] = useState(false);\r\n    const [drawModalVisible, setDrawModalVisible] = useState(false);\r\n    // Group size\r\n    const [groupSize, setGroupSize] = useState(2);\r\n    const [decrementButtonState, setDecrementButtonState] = useState(true);\r\n    const [incrementButtonState, setIncrementButtonState] = useState(false);\r\n    // Participants\r\n    const [participants, setParticipants] = useState([]);\r\n    const [participantName, setParticipantName] = useState(\"\");\r\n    // Tasks\r\n    const [tasks, setTasks] = useState([]);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    // Teams\r\n    const [teams, setTeams] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (groups.length == 0) {\r\n            setGroups(route.params.groups);\r\n            setCurrentItemId(route.params.currentItemId);\r\n            setCurrentItemTitle(route.params.currentItemTitle);\r\n            setParticipants(route.params.currentItemParticipants);\r\n            setTasks(route.params.currentItemTasks);\r\n            setTeams(route.params.currentItemTeams);\r\n        }\r\n    });\r\n\r\n    const checkInput = (text) => {\r\n        if (participantsModalVisible)\r\n            setParticipantName(text);\r\n        else\r\n            setTaskTitle(text);\r\n\r\n        if (/[a-ö]\\s/g.test(text)) {\r\n            if (participantsModalVisible)\r\n                setParticipant();\r\n            else\r\n                setTask();\r\n        }\r\n    };\r\n\r\n    // Add a new participant to the array\r\n    const setParticipant = () => {\r\n        setParticipants([...participants, {id: uuidv4(), name: participantName, selectedToTeam: false}]);\r\n        setParticipantName(\"\");\r\n    };\r\n\r\n    // Add a new task to the array\r\n    const setTask = () => {\r\n        setTasks([...tasks, {id: uuidv4(), title: taskTitle}]);\r\n        setTaskTitle(\"\");\r\n    };\r\n\r\n    // Remove the selected participant from the array\r\n    const removeParticipant = (id) => {\r\n        let array = participants.filter(item => item.id !== id);\r\n        setParticipants(array);\r\n        setParticipantsToGroup();\r\n    };\r\n\r\n    // Remove the selected task from the array\r\n    const removeTask= (id) => {\r\n        let array = tasks.filter(item => item.id !== id);\r\n        setTasks(array);\r\n        setTasksToGroup();\r\n    };\r\n\r\n    // Cancel changes made to the participants list\r\n    const cancelParticipantChanges = () => {\r\n        if(participants.length < 1) setParticipants([]);\r\n    };\r\n\r\n    // Cancel changes made to the tass list\r\n    const cancelTaskChanges = () => {\r\n        if(tasks.length < 1) setTasks([]);\r\n    };\r\n\r\n    // Add the added participants to the currently selected group\r\n    const setParticipantsToGroup = () => {\r\n        let group = groups.filter(item => item.id == currentItemId)[0];\r\n        let updatedGroup = {...group, participants: participants};\r\n        groups.splice(groups.findIndex(item => item.id == currentItemId), 1, updatedGroup);\r\n        storeData();\r\n    };\r\n\r\n    // Add the added tasks to the currently selected group\r\n    const setTasksToGroup = () => {\r\n        let group = groups.filter(item => item.id == currentItemId)[0];\r\n        let updatedGroup = {...group, tasks: tasks};\r\n        groups.splice(groups.findIndex(item => item.id == currentItemId), 1, updatedGroup);\r\n        storeData();\r\n    };\r\n\r\n    // Set the group size and limit to minimum of 2 and maximum of participants / 2\r\n    const setStateGroupSize = (value) => {\r\n        if (value <= 2) {\r\n            setDecrementButtonState(true);\r\n            setIncrementButtonState(false);\r\n            setGroupSize(2);\r\n        }\r\n        else if (value >= Math.floor(participants.length / tasks.length)) {\r\n            setIncrementButtonState(true);\r\n            setDecrementButtonState(false);\r\n            setGroupSize(Math.floor(participants.length / tasks.length));\r\n        }\r\n        else {\r\n            setDecrementButtonState(false);\r\n            setIncrementButtonState(false);\r\n            setGroupSize(value);\r\n        }\r\n    };\r\n\r\n    // Draw random teams and assign task and members\r\n    // TODO: handle extra participants who don't get a team during the drawing\r\n    // TODO: display teams in app\r\n    // TODO: revert participants selectedToTeam values to false so they can be drawn again\r\n    const drawTeams = () => {\r\n        let selectedTeams = [];\r\n        let members = [];\r\n\r\n        for (let i = 0; i < tasks.length; i++) {\r\n            for (let j = 0; j < groupSize; j++) {\r\n                let selectableParticipants = participants.filter(obj => obj.selectedToTeam == false);\r\n                let r = Math.floor(Math.random() * selectableParticipants.length);\r\n                let selectedParticipant = selectableParticipants[r]\r\n                let participantIndex = participants.findIndex(obj => obj.id == selectedParticipant.id);\r\n                \r\n                members.push(selectableParticipants[r].name);\r\n                participants[participantIndex].selectedToTeam = true;\r\n            }\r\n            selectedTeams = [...selectedTeams, {title: tasks[i].title, members: members}];\r\n            members = [];\r\n        }\r\n        setTeams(selectedTeams);\r\n        setTeamsToGroup()\r\n\r\n        setDrawModalVisible(!drawModalVisible)\r\n    };\r\n\r\n    // Add the drawn teams to the currently selected group\r\n    const setTeamsToGroup = () => {\r\n        let group = groups.filter(item => item.id == currentItemId)[0];\r\n        let updatedGroup = {...group, teams: teams};\r\n        groups.splice(groups.findIndex(item => item.id == currentItemId), 1, updatedGroup);\r\n        storeData();\r\n    }\r\n\r\n    // Store data in local storage as JSON\r\n    const storeData = async () => {\r\n        try {\r\n            await AsyncStorage.setItem('@groups', JSON.stringify(groups));\r\n        }\r\n        catch (e) {\r\n            onsole.log(\"Something went wrong while saving the groups: \" + e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={Styles.Root}>\r\n            <View style={Styles.Container}>\r\n                <Text style={Styles.Header}>{currentItemTitle}</Text>\r\n                <Pressable\r\n                    style={[Styles.Button, Styles.ButtonVert, Styles.Continue]}\r\n                    onPress={() => setParticipantsModalVisible(!participantsModalVisible)}\r\n                >\r\n                    <Text style={Styles.ButtonText}>\r\n                        <Entypo name=\"users\" size={16} color=\"white\" /> Participants\r\n                    </Text>\r\n                </Pressable>\r\n                <Pressable\r\n                    style={[Styles.Button, Styles.ButtonVert, Styles.Continue]}\r\n                    onPress={() => setTasksModalVisible(!tasksModalVisible)}\r\n                >\r\n                    <Text style={Styles.ButtonText}>\r\n                        <Entypo name=\"list\" size={16} color=\"white\" /> Tasks\r\n                        </Text>\r\n                </Pressable>\r\n                <Pressable\r\n                    style={[Styles.Button, Styles.ButtonVert, Styles.Continue]}\r\n                    onPress={() => setDrawModalVisible(!drawModalVisible)}\r\n                >\r\n                    <Text style={Styles.ButtonText}>\r\n                        <Entypo name=\"shuffle\" size={16} color=\"white\" /> Draw\r\n                    </Text>\r\n                </Pressable>\r\n            </View>\r\n            {/* Participants modal */}\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={participantsModalVisible}\r\n                onRequestClose={() => {setParticipantsModalVisible(!participantsModalVisible);}}\r\n            >\r\n                <View style={Styles.ModalRoot}>\r\n                    <View style={Styles.ModalContainer}>\r\n                        <Text style={Styles.InputHeader}>Add participants</Text>\r\n                        <View style={Styles.ButtonContainer}>\r\n                            <Pressable \r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Cancel]}\r\n                                onPress={() => {\r\n                                    setParticipantsModalVisible(!participantsModalVisible),\r\n                                    cancelParticipantChanges()\r\n                                }}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Cancel</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Confirm]}\r\n                                onPress={() => {\r\n                                    setParticipantsModalVisible(!participantsModalVisible),\r\n                                    setParticipantsToGroup()\r\n                                }}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Save</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                        <View style={Styles.ItemInputContainer}>\r\n                            <TextInput\r\n                                style={[Styles.Input, Styles.ItemInput]}\r\n                                value={participantName}\r\n                                placeholder=\"Enter name here\"\r\n                                onChangeText={(text) => checkInput(text)}\r\n                            />\r\n                            <Pressable\r\n                                style={Styles.ItemInputButton}\r\n                                onPress={() => setParticipant()}\r\n                            >\r\n                                <Entypo name=\"add-user\" size={16} color=\"white\" />\r\n                            </Pressable>\r\n                        </View>\r\n                        {(participants.length < 1) ? EmptyMsg(\"No participants yet...\") :\r\n                            <FlatList\r\n                                style={Styles.FlatList}\r\n                                data={participants}\r\n                                keyExtractor={(item, index) => index.toString()}\r\n                                renderItem={({ item }) =>\r\n                                    <View style={Styles.ItemContainer}>\r\n                                        <Pressable\r\n                                            style={Styles.ItemTitleContainer}\r\n                                            >\r\n                                            <Text style={Styles.ItemTitle}>{item.name}</Text>\r\n                                        </Pressable>\r\n                                        <Pressable\r\n                                            style={Styles.ItemButton}\r\n                                            onPress={() => removeParticipant(item.id)}\r\n                                            >\r\n                                            <Entypo name=\"cross\" size={20} color=\"white\" />\r\n                                        </Pressable>\r\n                                    </View>\r\n                                }\r\n                            />\r\n                        }\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n            {/* Tasks modal */}\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={tasksModalVisible}\r\n                onRequestClose={() => {setTasksModalVisible(!tasksModalVisible);}}\r\n            >\r\n                <View style={Styles.ModalRoot}>\r\n                    <View style={Styles.ModalContainer}>\r\n                        <Text style={Styles.InputHeader}>Add tasks</Text>\r\n                        <View style={Styles.ButtonContainer}>\r\n                            <Pressable \r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Cancel]}\r\n                                onPress={() => {\r\n                                    setTasksModalVisible(!tasksModalVisible),\r\n                                    cancelTaskChanges()\r\n                                }}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Cancel</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Confirm]}\r\n                                onPress={() => {\r\n                                    setTasksModalVisible(!tasksModalVisible),\r\n                                    setTasksToGroup()\r\n                                }}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Save</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                        <View style={Styles.ItemInputContainer}>\r\n                            <TextInput\r\n                                style={[Styles.Input, Styles.ItemInput]}\r\n                                value={taskTitle}\r\n                                placeholder=\"Enter task here\"\r\n                                onChangeText={(text) => checkInput(text)}\r\n                            />\r\n                            <Pressable\r\n                                style={Styles.ItemInputButton}\r\n                                onPress={() => setTask()}\r\n                            >\r\n                                <Entypo name=\"add-to-list\" size={16} color=\"white\" />\r\n                            </Pressable>\r\n                        </View>\r\n                        {(tasks.length < 1) ? EmptyMsg(\"No tasks yet...\") :\r\n                            <FlatList\r\n                                style={Styles.FlatList}\r\n                                data={tasks}\r\n                                keyExtractor={(item, index) => index.toString()}\r\n                                renderItem={({ item }) =>\r\n                                    <View style={Styles.ItemContainer}>\r\n                                        <Pressable\r\n                                            style={Styles.ItemTitleContainer}\r\n                                            >\r\n                                            <Text style={Styles.ItemTitle}>{item.title}</Text>\r\n                                        </Pressable>\r\n                                        <Pressable\r\n                                            style={Styles.ItemButton}\r\n                                            onPress={() => removeTask(item.id)}\r\n                                            >\r\n                                            <Entypo name=\"cross\" size={20} color=\"white\" />\r\n                                        </Pressable>\r\n                                    </View>\r\n                                }\r\n                            />\r\n                        }\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n            {/* group drawing modal */}\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={drawModalVisible}\r\n                onRequestClose={() => {setDrawModalVisible(!drawModalVisible);}}\r\n            >\r\n                <View style={Styles.ModalRoot}>\r\n                    <View style={Styles.ModalContainer}>\r\n                        <Text style={Styles.InputHeader}>Team size</Text>\r\n                        <View style={Styles.NumberInputContainer}>\r\n                            <Pressable\r\n                                disabled={decrementButtonState}\r\n                                style={[Styles.NumberInputButton, Styles.NumberInputButtonLeft]}\r\n                                onPress={() => setStateGroupSize(groupSize - 1)}\r\n                            >\r\n                                <Entypo name=\"minus\" size={24} color=\"white\" />\r\n                            </Pressable>\r\n                            <TextInput\r\n                                style={[Styles.Input, Styles.NumberInput]}\r\n                                keyboardType='numeric'\r\n                                value={groupSize}\r\n                            />\r\n                            <Pressable\r\n                                disabled={incrementButtonState}\r\n                                style={[Styles.NumberInputButton, Styles.NumberInputButtonRight]}\r\n                                onPress={() => setStateGroupSize(groupSize + 1)}\r\n                            >\r\n                                <Entypo name=\"plus\" size={24} color=\"white\" />\r\n                            </Pressable>\r\n                        </View>\r\n                        <View style={Styles.ButtonContainer}>\r\n                            <Pressable \r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Cancel]}\r\n                                onPress={() => setDrawModalVisible(!drawModalVisible)}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Cancel</Text>\r\n                            </Pressable>\r\n                            <Pressable\r\n                                style={[Styles.Button, Styles.ButtonHor, Styles.Confirm]}\r\n                                onPress={() => drawTeams()}\r\n                            >\r\n                                <Text style={Styles.ButtonText}>Draw</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}","import * as React from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\n\r\nimport { HomeScreen } from './screens/HomeScreen'\r\nimport { GroupTasker } from './screens/GroupTasker';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator initialRouteName=\"Home\">\r\n        <Stack.Screen name='Home' component={HomeScreen} />\r\n        <Stack.Screen name='Group tasker' component={GroupTasker} />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"],"sourceRoot":""}